// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc2974.Walton2013.commands;

import org.usfirst.frc2974.Walton2013.Robot;

/**
 *
 */
public class UseDrive extends CommandBase {

    /**
     *
     */
    public static boolean driverControl;

    public UseDrive(boolean isDriverControlled) {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(drive);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        driverControl = isDriverControlled;
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        double[] instructions;
        instructions = getMovementInstructions(2.0);

        drive.setSpeeds(instructions[1], instructions[2], instructions[3]);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }

    /**
     * According to last year's code, the default number should be 2. otherwise,
     * just input a different modifier to slow down the movement, in theory
     * (untested as of 1-18-2013)
     */
    private double[] getMovementInstructions(double modifier) {
        double[] movementInstructions = new double[3];

        double forward = (oi.getLeftY() + oi.getRightY()) / modifier;
        double turn = (oi.getLeftY() - oi.getRightY()) / modifier;
        double strafe = -(oi.getLeftX() + oi.getRightX()) / modifier;
        movementInstructions[0] = forward;
        movementInstructions[1] = turn;
        movementInstructions[2] = strafe;

        return movementInstructions;
    }
}
