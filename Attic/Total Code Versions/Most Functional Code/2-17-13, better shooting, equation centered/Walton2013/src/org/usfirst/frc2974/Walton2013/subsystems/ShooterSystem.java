// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc2974.Walton2013.subsystems;

import edu.wpi.first.wpilibj.AnalogChannel;
import edu.wpi.first.wpilibj.CANJaguar;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.can.CANTimeoutException;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc2974.Walton2013.RobotMap;
import org.usfirst.frc2974.Walton2013.commands.AimAndShoot;
import org.usfirst.frc2974.Walton2013.commands.CommandBase;
import org.usfirst.frc2974.Walton2013.commands.DelayMaker;

/**
 *
 */
public class ShooterSystem extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    CANJaguar shooterJag = RobotMap.shootershooterJag;
    Talon elevate = RobotMap.elevateTalon;
    Talon loader = RobotMap.loadTalon;
    private static DigitalInput sensor = new DigitalInput(RobotMap.PUSHER_SENSOR_CHANNEL);
    private static DelayMaker delayer = new DelayMaker(.875);
    boolean first = true;
    static double oldVoltage = 0;
    static double oldCurrent = 0;
    private static double userMultiplier = 14;
    Timer c = new Timer();
    AnalogChannel anglePot = RobotMap.shooterPot;
    public static final int FORWARD = 1, BACKWARD = -1, ZERO = 0;

    public ShooterSystem() {
        try {
            shooterJag.changeControlMode(CANJaguar.ControlMode.kVoltage);
            shooterJag.enableControl();
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
        c.reset();
        c.start();
    }

    public void shoot() { //****************************************************
        if (CommandBase.oi.rightJoystick.getRawButton(6)) {
            if (!sensorPushed()) {
                loader.set(ZERO);
            } else {
                loader.set(BACKWARD);
            }
        } else if (CommandBase.oi.rightJoystick.getRawButton(3)) {
            loader.set(ZERO);
        } else {
            if (first && CommandBase.oi.rightJoystick.getRawButton(1) && !sensorPushed()) {
                loader.set(ZERO);
                DriveTrain.STOP_DRIVE();
                delayer.delayMe();
                first = false;
            } else if (CommandBase.oi.rightJoystick.getRawButton(1) || sensorPushed()) { //if trigger pulled or sensor pressed then spin wheel
                loader.set(FORWARD);
            } else if (!CommandBase.oi.rightJoystick.getRawButton(1)) {// || !sensor.get()) { //if trigger released and sensor unpressed then stop
                loader.set(ZERO);
            } else {
            }
        }
        if (sensorPushed()) {
            first = true;
        }
        if (CommandBase.oi.rightJoystick.getRawButton(11)) {
            delayer.setDelaySeconds(CommandBase.oi.ds.getAnalogIn(2));
        }
    }

    public double getPotVoltage() {
        return anglePot.getAverageVoltage();
    }

    public double getShooterArbitraryNumber() {
        double arbitraryNumber = anglePot.getAverageVoltage();
        arbitraryNumber -= 4.645045099; //subtract the min to make the starting point 0
        arbitraryNumber /= .42643; //divide by the difference to get a 0 to 1 value
        arbitraryNumber -= 1; //subtract 1 to get a -1 to 0 value
        arbitraryNumber *= -1; //multiply by negative 1 to get a 1 to 0 value;
        return arbitraryNumber;
    }

    public void setElevate(double speed) {
        //speed = -speed;
        double num;
        if (CommandBase.oi.rightJoystick.getRawButton(3)) {
            System.out.println("USER DEAD STOP: from ShooterSystem, method setElevate");
            num = 0;
        } else { //if user lets us move
            if (speed > 0 && anglePot.getAverageVoltage() <= 4.73) {
                System.out.println("HARD UPPER STOP ELEVATE: from ShooterSystem, method setElevate");
                num = 0;
            } else if (speed < 0 && anglePot.getAverageVoltage() >= 5.07) {
                System.out.println("HARD LOWER STOP ELEVATE: from ShooterSystem, method setElevate");
                num = 0;
            } else {
                if (getShooterArbitraryNumber() > .7 && speed > .5) {
                    num = .5;
                } else if (getShooterArbitraryNumber() < .3 && speed < -.5) {//getShooterArbitraryNumber()
                    num = -.5;
                } else {
                    num = speed;
                }
            }
        }
        elevate.set(-num);
    }

    public void spinUpWheel(double speed) {
        // if (c.get() > .1) {
        double a = 0;
        try {
//            if ((oldVoltage - shooterJag.getOutputVoltage()) > .5 || (oldCurrent - shooterJag.getOutputCurrent()) > 5) {
//                a = speed * userMultiplier;
//                //shooterJag.setX(a);
//            } else
            if ((shooterJag.getOutputCurrent() - oldCurrent) > 2) { //(oldVoltage - shooterJag.getOutputVoltage()) > .5 || 5
                a = speed * userMultiplier;
            } else {
                a = speed * 12;
            }
            if (a > 12.0) {
                a = 12;
            }
            shooterJag.setX(a);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
//            c.reset();
//            c.start();
//        }
        if (CommandBase.oi.leftJoystick.getRawButton(6)) {
            updateMultiplier();
        }
        updateShooter();

    }

    public void updateMultiplier() {
        double temp = CommandBase.oi.ds.getAnalogIn(3);
        temp *= 6;
        System.out.println("UPDATING MULTIPLIER TO: " + temp);
        userMultiplier = temp;
    }

    public void updateShooter() {
        try {
            double temp = oldCurrent;
            oldVoltage = shooterJag.getOutputVoltage();
            oldCurrent = shooterJag.getOutputCurrent();
            if (CommandBase.oi.leftJoystick.getRawButton(5)) {
                printShooterValues(oldVoltage, shooterJag.getX(), oldCurrent, temp);
            }
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
    }

    public void printShooterValues(double v, double setV, double i, double oldCurr) {
        System.out.println("Volatge: " + v);
        System.out.println("User Set Voltage: " + setV);
        System.out.println("Current " + i);
        System.out.println("Old Current " + oldCurr);
        System.out.println("Time: " + c.get());
        System.out.println("*************************");
    }

    public void E_STOP_WHEEL() {
        try {
            shooterJag.setX(0); //Turn on wheel using volts, not vBus
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
    }

    public void E_REVERSE_WHEEL() {
        try {
            shooterJag.setX(-1 * 12); //Turn on wheel using volts, not vBus
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
    }

    public void initDefaultCommand() {
        setDefaultCommand(new AimAndShoot());
    }

    public void automonousShooting(boolean shooting) {
        if (shooting || sensorPushed()) { //if trigger pulled or sensor pressed then spin wheel
            loader.set(1);
        } else if (!shooting) {// || !sensor.get()) { //if trigger released and sensor unpressed then stop
            loader.set(0);
            //Timer.delay(1);
        } else {
        }
    }

    public static boolean sensorPushed() {
        return !sensor.get();
    }
}
//        if (CommandBase.oi.rightJoystick.getRawButton(6)) {
//            if (!sensor.get()) {
//                loader.set(0);
//            } else {
//                loader.set(-1);
//            }
//        } else if (CommandBase.oi.rightJoystick.getRawButton(3) || CommandBase.oi.rightJoystick.getRawButton(1) || !CommandBase.oi.rightJoystick.getRawButton(1)) {
//            if (CommandBase.oi.rightJoystick.getRawButton(3)) {
//                loader.set(0);
//            } else {
//                if (CommandBase.oi.rightJoystick.getRawButton(1) || sensor.get()) { //if trigger pulled or sensor pressed then spin wheel
//                    loader.set(1);
//                } else if (!CommandBase.oi.rightJoystick.getRawButton(1)) {// || !sensor.get()) { //if trigger released and sensor unpressed then stop
//                    loader.set(0);
//                }
//            }
//        }