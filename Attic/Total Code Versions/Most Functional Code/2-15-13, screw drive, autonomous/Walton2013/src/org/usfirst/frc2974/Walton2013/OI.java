// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc2974.Walton2013;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc2974.Walton2013.commands.*;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS

    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick leftJoystick;
    public JoystickButton spinWheel;
    public JoystickButton spatulaUp;
    public JoystickButton spatulaDown;
    public JoystickButton frisbeeDownAndOut;
    public JoystickButton autoConveyor;
    //**************************************
    public Joystick rightJoystick;
    public JoystickButton shootFrisbee;
    public JoystickButton autoAim;
    public JoystickButton shooterUp;
    public JoystickButton shooterDown;
    public JoystickButton frisbeeUpAndIn;
    public DriverStation ds = DriverStation.getInstance();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public boolean autoFinished;
    public boolean wheelIsUp = true;

    public OI() {
//LEFT JOYSTICK
        leftJoystick = new Joystick(1);
        spinWheel = new JoystickButton(leftJoystick, 1);
//        spatulaUp = new JoystickButton(leftJoystick, 3);
//        spatulaDown = new JoystickButton(leftJoystick, 2);
        // frisbeeDownAndOut = new JoystickButton(leftJoystick, 4);
        autoConveyor = new JoystickButton(leftJoystick, 5);

        spinWheel.whileHeld(new AimAndShoot());
        spinWheel.whenReleased(new AimAndShoot());
//        spatulaUp.whileHeld(new UseConveyor());
//        spatulaUp.whenReleased(new UseConveyor());
//        spatulaDown.whileHeld(new UseConveyor());
//        spatulaDown.whenReleased(new UseConveyor());
//        frisbeeDownAndOut.whileHeld(new UseConveyor());
//        frisbeeDownAndOut.whenReleased(new UseConveyor());
//        autoConveyor.whileHeld(new UseConveyor());
//        autoConveyor.whenReleased(new UseConveyor());

//RIGHT JOYSTICK
        rightJoystick = new Joystick(2);
        shootFrisbee = new JoystickButton(rightJoystick, 1);
        autoAim = new JoystickButton(rightJoystick, 4);
        shooterUp = new JoystickButton(rightJoystick, 3);
        shooterDown = new JoystickButton(rightJoystick, 2);
        frisbeeUpAndIn = new JoystickButton(rightJoystick, 5);

        shootFrisbee.whileHeld(new AimAndShoot());
        shootFrisbee.whenReleased(new AimAndShoot());
        autoAim.whileHeld(new AimAndShoot());
        autoAim.whenReleased(new AimAndShoot());
        shooterUp.whileHeld(new AimAndShoot());
        shooterUp.whenReleased(new AimAndShoot());
        shooterDown.whileHeld(new AimAndShoot());
        shooterDown.whenReleased(new AimAndShoot());
//        frisbeeUpAndIn.whileHeld(new UseConveyor());
//        frisbeeUpAndIn.whenReleased(new UseConveyor());

        //SmartDashboard.putData("fire", new AimAndShoot());

        //SmartDashboard.putData("DriveWithJoysticks", new UseDrive());
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLeftJoystick() {
        return leftJoystick;
    }

    public Joystick getRightJoystick() {
        return rightJoystick;
    }

    public double getRightY() {
        return rightJoystick.getY();
    }

    public double getLeftY() {
        return leftJoystick.getY();
    }

    public double getRightX() {
        return rightJoystick.getX();
    }

    public double getLeftX() {
        return leftJoystick.getX();
    }

    public double getDesiredWheelSpeed() {
        double shooterPower = ds.getAnalogIn(1);
        shooterPower -= 1;
        return shooterPower;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

    public void setAutoEnd(boolean isEnded) {
        autoFinished = isEnded;
    }
}
