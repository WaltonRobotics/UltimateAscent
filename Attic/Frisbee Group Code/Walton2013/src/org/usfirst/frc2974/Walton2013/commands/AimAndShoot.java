// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc2974.Walton2013.commands;

import edu.wpi.first.wpilibj.command.Command;

/**
 *
 */
public class AimAndShoot extends CommandBase {

    private static double shooterSpeed = 1; //FULL POWER

    public AimAndShoot() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        requires(shooter);
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        if (!oi.rightJoystick.getRawButton(4)) { //ONLY TELEOP CODE
//Spin up the wheels
            if (oi.leftJoystick.getRawButton(1)) {
                shooter.spinUpWheel(oi.getDesiredWheelSpeed());
            } else {
                shooter.spinUpWheel(.5);
            }
//Change the shooter angle
            if (oi.rightJoystick.getRawButton(3)) {
                shooter.putAngleUp();
            } else if (oi.rightJoystick.getRawButton(2)) {
                shooter.putAngleDown();
            } else {
                shooter.stopChangingAngle();
            }

        } else {
            shooter.spinUpWheel(1);
            //DO DA AUTOMONOUS
        }

//Shoot the frisbees        
        if (oi.rightJoystick.getRawButton(1)) {
            shooter.SHOOT();
        }

    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
